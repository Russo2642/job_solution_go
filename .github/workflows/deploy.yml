name: Deploy JobSolution

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/job_solution:latest

      - name: Prepare migrations and config files
        run: |
          mkdir -p deploy_files/internal/db
          cp -r internal/db/migrations deploy_files/internal/db/
          echo "version: '3.9'" > deploy_files/docker-compose.yml
          cat docker-compose.yml >> deploy_files/docker-compose.yml
          cp nginx.conf deploy_files/

      - name: Copy migrations to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy_files/*"
          target: "~"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e

            cd ~

            # Создание .env файла
            cat > .env <<EOL
            # Настройки сервера
            SERVER_PORT=${{ secrets.SERVER_PORT }}
            SERVER_MODE=${{ secrets.SERVER_MODE }}

            # PostgreSQL
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}
            POSTGRES_MAX_OPEN_CONNS=${{ secrets.POSTGRES_MAX_OPEN_CONNS }}
            POSTGRES_MAX_IDLE_CONNS=${{ secrets.POSTGRES_MAX_IDLE_CONNS }}
            POSTGRES_CONN_MAX_LIFETIME=${{ secrets.POSTGRES_CONN_MAX_LIFETIME }}

            # JWT
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}

            # Безопасность
            PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}

            # Лимиты запросов
            RATE_LIMIT_REQUESTS=${{ secrets.RATE_LIMIT_REQUESTS }}
            RATE_LIMIT_DURATION=${{ secrets.RATE_LIMIT_DURATION }}

            # Docker Hub
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            EOL

            # Создание директории с правильными правами доступа
            sudo mkdir -p internal/db/migrations
            sudo rm -rf internal/db/migrations/*  # Удаляем старые миграции если они есть
            
            # Копируем файлы миграций с правильными правами доступа
            if [ -d ~/internal/db/migrations ]; then
              sudo cp -r ~/internal/db/migrations/* internal/db/migrations/
              # Устанавливаем правильные права доступа
              sudo chmod -R 777 internal/db
              # Изменяем владельца директории на текущего пользователя
              sudo chown -R $(whoami):$(whoami) internal
              # Удаляем лишние файлы
              sudo rm -rf ~/internal
            fi

            # Проверка наличия директории с миграциями
            if [ ! -d "internal/db/migrations" ] || [ -z "$(ls -A internal/db/migrations)" ]; then
              echo "Error: Migrations directory is empty or does not exist!"
              exit 1
            fi

            # Создаем директории для сертботa, если нужно
            mkdir -p certbot/conf certbot/www
            
            # Запуск контейнеров
            docker-compose pull
            docker-compose down
            docker-compose up -d

            docker image prune -af
