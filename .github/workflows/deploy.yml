name: Deploy JobSolution

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/job_solution:latest

      - name: Prepare deployment files
        run: |
          mkdir -p deploy_files
          cp docker-compose.yml deploy_files/

          # Copy nginx.conf if exists
          if [ -f "nginx.conf" ]; then
            cp nginx.conf deploy_files/
          fi

          # Copy SSL init script if exists
          if [ -f "init-letsencrypt.sh" ]; then
            cp init-letsencrypt.sh deploy_files/
            chmod +x deploy_files/init-letsencrypt.sh
          fi

          # Copy certbot/conf if exists (certificates)
          if [ -d "certbot/conf" ]; then
            cp -r certbot/conf deploy_files/certbot_conf
          fi

          # Copy certbot/www if exists
          if [ -d "certbot/www" ]; then
            cp -r certbot/www deploy_files/certbot_www
          fi

          # Copy ssl folder if exists
          if [ -d "ssl" ]; then
            cp -r ssl deploy_files/ssl
          fi

          echo "Deployment files prepared:"
          ls -la deploy_files/

      - name: Copy deployment files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy_files/*"
          target: "/home/${{ secrets.SERVER_USER }}/temp_deploy"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e

            cd ~
            sudo mkdir -p jobsolution/backend
            cd ~/jobsolution/backend

            sudo mkdir -p certbot/conf certbot/www ssl

            if [ -d ~/temp_deploy ]; then
              sudo cp ~/temp_deploy/docker-compose.yml ./docker-compose.yml
              sudo chown $(whoami):$(whoami) ./docker-compose.yml

              if [ -f ~/temp_deploy/nginx.conf ]; then
                sudo cp ~/temp_deploy/nginx.conf ./nginx.conf
                sudo chown $(whoami):$(whoami) ./nginx.conf
              fi

              if [ -f ~/temp_deploy/init-letsencrypt.sh ]; then
                sudo cp ~/temp_deploy/init-letsencrypt.sh ./init-letsencrypt.sh
                sudo chmod +x ./init-letsencrypt.sh
                sudo chown $(whoami):$(whoami) ./init-letsencrypt.sh
              fi

              if [ -d ~/temp_deploy/certbot_conf ]; then
                sudo rm -rf ./certbot/conf
                sudo cp -r ~/temp_deploy/certbot_conf ./certbot/conf
                sudo chown -R $(whoami):$(whoami) ./certbot/conf
              fi

              if [ -d ~/temp_deploy/certbot_www ]; then
                sudo rm -rf ./certbot/www
                sudo cp -r ~/temp_deploy/certbot_www ./certbot/www
                sudo chown -R $(whoami):$(whoami) ./certbot/www
              fi

              if [ -d ~/temp_deploy/ssl ]; then
                sudo rm -rf ./ssl
                sudo cp -r ~/temp_deploy/ssl ./ssl
                sudo chown -R $(whoami):$(whoami) ./ssl
              fi

              rm -rf ~/temp_deploy
            else
              echo "ERROR: temp_deploy directory not found!"
              exit 1
            fi

            echo "Stopping old containers..."
            docker-compose down || true

            if docker ps -a | grep "job_solution_"; then
              docker ps -a | grep "job_solution_" | awk '{print $1}' | xargs -r docker rm -f
            fi

            echo "Pulling latest images..."
            docker-compose pull

            echo "Starting new containers..."
            SERVER_PORT=${{ secrets.SERVER_PORT }} \
            SERVER_MODE=${{ secrets.SERVER_MODE }} \
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
            POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }} \
            POSTGRES_MAX_OPEN_CONNS=${{ secrets.POSTGRES_MAX_OPEN_CONNS }} \
            POSTGRES_MAX_IDLE_CONNS=${{ secrets.POSTGRES_MAX_IDLE_CONNS }} \
            POSTGRES_CONN_MAX_LIFETIME=${{ secrets.POSTGRES_CONN_MAX_LIFETIME }} \
            JWT_SECRET=${{ secrets.JWT_SECRET }} \
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }} \
            JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }} \
            PASSWORD_SALT=${{ secrets.PASSWORD_SALT }} \
            RATE_LIMIT_REQUESTS=${{ secrets.RATE_LIMIT_REQUESTS }} \
            RATE_LIMIT_DURATION=${{ secrets.RATE_LIMIT_DURATION }} \
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} \
            docker-compose up -d

            if [ -f "./init-letsencrypt.sh" ] && [ ! -d "certbot/conf/live" ]; then
              echo "Running SSL initialization..."
              ./init-letsencrypt.sh
              docker-compose restart nginx
              echo "HTTPS configured and activated!"
            fi

            docker image prune -af

            echo "Containers status:"
            docker-compose ps
