name: Deploy JobSolution

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/job_solution:latest

      - name: Prepare deployment files
        run: |
          # Создаем временную директорию для файлов деплоя
          mkdir -p deploy_files
          
          # Копируем docker-compose.yml
          cp docker-compose.yml deploy_files/
          
          # Копируем nginx.conf если он есть
          if [ -f "nginx.conf" ]; then
            cp nginx.conf deploy_files/
          fi
          
          # Копируем скрипт для инициализации SSL-сертификатов
          if [ -f "init-letsencrypt.sh" ]; then
            cp init-letsencrypt.sh deploy_files/
            chmod +x deploy_files/init-letsencrypt.sh
            # Обновляем email в скрипте
            sed -i "s/your-real-email@example.com/${{ secrets.SSL_EMAIL }}/g" deploy_files/init-letsencrypt.sh
          fi
          
          # Для проверки выводим список файлов
          echo "Файлы для деплоя:"
          ls -la deploy_files/

      - name: Copy deployment files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy_files/*"
          target: "/home/${{ secrets.SERVER_USER }}/temp_deploy"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e

            cd ~
            
            # Создаём директории laps/backend если они не существуют
            mkdir -p laps/backend
            cd laps/backend
            
            # Создаём необходимые директории
            mkdir -p certbot/conf certbot/www
            
            # Копируем файлы из временной директории деплоя
            if [ -d ~/temp_deploy ]; then
              # Копируем docker-compose.yml и nginx.conf
              cp ~/temp_deploy/docker-compose.yml ./docker-compose.yml
              if [ -f ~/temp_deploy/nginx.conf ]; then
                cp ~/temp_deploy/nginx.conf ./nginx.conf
              fi
              
              # Копируем скрипт для SSL
              if [ -f ~/temp_deploy/init-letsencrypt.sh ]; then
                cp ~/temp_deploy/init-letsencrypt.sh ./init-letsencrypt.sh
                chmod +x ./init-letsencrypt.sh
              fi
              
              # Удаляем временную директорию
              rm -rf ~/temp_deploy
            else
              echo "ОШИБКА: Директория temp_deploy не найдена!"
              exit 1
            fi

            # Создание .env файла
            cat > .env <<EOL
            # Настройки сервера
            SERVER_PORT=${{ secrets.SERVER_PORT }}
            SERVER_MODE=${{ secrets.SERVER_MODE }}

            # PostgreSQL
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}
            POSTGRES_MAX_OPEN_CONNS=${{ secrets.POSTGRES_MAX_OPEN_CONNS }}
            POSTGRES_MAX_IDLE_CONNS=${{ secrets.POSTGRES_MAX_IDLE_CONNS }}
            POSTGRES_CONN_MAX_LIFETIME=${{ secrets.POSTGRES_CONN_MAX_LIFETIME }}

            # JWT
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}
            JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }}

            # Безопасность
            PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}

            # Лимиты запросов
            RATE_LIMIT_REQUESTS=${{ secrets.RATE_LIMIT_REQUESTS }}
            RATE_LIMIT_DURATION=${{ secrets.RATE_LIMIT_DURATION }}

            # Docker Hub
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            EOL

            # Принудительная остановка всех старых контейнеров
            echo "Остановка всех старых контейнеров..."
            docker-compose down || true
            
            # Проверка на наличие "зависших" контейнеров и их удаление
            if docker ps -a | grep "job_solution_"; then
              echo "Обнаружены старые контейнеры, удаляем их принудительно..."
              docker ps -a | grep "job_solution_" | awk '{print $1}' | xargs -r docker rm -f
            fi
            
            # Загрузка образов
            echo "Загрузка новых образов..."
            docker-compose pull

            # Запуск новых контейнеров
            echo "Запуск новых контейнеров..."
            docker-compose up -d

            # Настройка SSL-сертификатов, если скрипт существует и не было ранее настроенных сертификатов
            if [ -f "./init-letsencrypt.sh" ] && [ ! -d "certbot/conf/live" ]; then
              echo "Запуск настройки SSL-сертификатов..."
              ./init-letsencrypt.sh
              
              # Перезапуск Nginx для применения изменений
              docker-compose restart nginx
              echo "HTTPS настроен и активирован!"
            fi
            
            # Очистка неиспользуемых образов
            docker image prune -af
            
            # Отображение статуса
            echo "Статус контейнеров:"
            docker-compose ps
